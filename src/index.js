import axios from "axios";
import SimpleLightbox from "simplelightbox";
import "simplelightbox/dist/simple-lightbox.min.css";

const BASE_URL = 'https://pixabay.com/api/';
const KEY = '31233349-657dbeb08b09bae80b555b3c4';
const form = document.querySelector('#search-form');
const input = form.querySelector('input[name="searchQuery"]');
const button = form.querySelector('button[type="submit"]');
const gallery = document.querySelector('.gallery');


let currentDataFromApi = '';  
let currentPage = 1;
let totalHits = 0;
let observer;

let lightbox;

form.addEventListener('submit', onForm);

function onForm(e) {
    e.preventDefault();

    const writeToInput = input.value.trim();

    if (writeToInput === '') {
        alert('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–ª–µ');
        return
    }
   
    currentDataFromApi = writeToInput;
    currentPage = 1;
    gallery.innerHTML = '';
    getDataFromApi(currentDataFromApi, currentPage);   

    form.reset();

    if (observer) observer.disconnect(); 
    createObserver();     
}
 
async function getDataFromApi(dataFromApi) {
    try {
        const response = await axios.get(BASE_URL, {
            params: {
                key: KEY,
                q: dataFromApi,
                image_type: 'photo',
                orientation: 'horizontal',
                safesearch: true,
            }
        }
        );

        const receivedDataArrayFromApi = response.data.hits; 

        if (receivedDataArrayFromApi.length === 0) {
            alert('Sorry, there are no images matching your search query. Please try again.');
            return;
        }
         
        renderHits(receivedDataArrayFromApi);

        if (page > 1) {          
            const { height: cardHeight } = document
                .querySelector(".gallery")
                .firstElementChild.getBoundingClientRect();
           
            window.scrollBy({
                top: cardHeight * 2,
                behavior: "smooth",
            });
        }     
    } catch (error) {
        console.error(error);
    }
}

async function getDataFromApi(dataFromApi, page = 1) {
    try {
        const response = await axios.get(BASE_URL, {
            params: {
                key: KEY,
                q: dataFromApi,
                image_type: 'photo',
                orientation: 'horizontal',
                safesearch: true,
                page: page,
                per_page: 40,
            }
        });

        const receivedDataArrayFromApi = response.data.hits;

        if (page === 1) {
            totalHits = response.data.totalHits;
            if (totalHits > 0) {
                alert(`Hooray! We found ${totalHits} images.`);
            }
        }

        if (receivedDataArrayFromApi.length === 0 && page === 1) {
            alert('Sorry, there are no images matching your search query. Please try again.');
            return;
        }

        renderHits(receivedDataArrayFromApi);

        const totalLoaded = document.querySelectorAll('.photo-card').length;
        if (totalLoaded >= totalHits) {
            observer.disconnect();
            alert("We're sorry, but you've reached the end of search results.");
        }

    } catch (error) {
        console.error(error);
    }
}

function createMarkup(hits) {
    return hits.map(({ webformatURL, largeImageURL, tags, likes, views, comments, downloads }) => {
        return `  
         <a class="gallery__item" href="${largeImageURL}">     
        <div class="photo-card">
        <img src="${webformatURL}" alt="${tags}" loading="lazy" />
        <div class="info">
          <p class="info-item"><b>Likes:</b> ${likes}</p>
          <p class="info-item"><b>Views:</b> ${views}</p>
          <p class="info-item"><b>Comments:</b> ${comments}</p>
          <p class="info-item"><b>Downloads:</b> ${downloads}</p>
        </div>       
        </div>
        </a>
        `
    }).join('');
}

function renderHits(hits) {
    gallery.insertAdjacentHTML('beforeend', createMarkup(hits));

    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º lightbox
    if (!lightbox) {
        lightbox = new SimpleLightbox('.gallery a', {
            captionsData: 'alt',
            captionDelay: 250,
            close: false,
        });
    } else {
        lightbox.refresh();
    }
}

function createObserver() {
    const options = {
        root: null,
        rootMargin: '300px',
        threshold: 0,
    };

    observer = new IntersectionObserver(handleIntersect, options);
    const sentinel = document.querySelector('#sentinel');
    if (sentinel) observer.observe(sentinel);
}

function handleIntersect(entries) {
    entries.forEach(entry => {
        if (entry.isIntersecting && currentDataFromApi !== '') {
            currentPage++;
            getDataFromApi(currentDataFromApi, currentPage);
        }
    });
}



/*** 11 ***/
// –°–µ–π—á–∞—Å –ø–æ—à–∞–≥–æ–≤–æ –¥–æ–±–∞–≤–∏–º –±–∏–±–ª–∏–æ—Ç–µ–∫—É SimpleLightbox –≤ —Ç–≤–æ–π –∫–æ–¥, —á—Ç–æ–±—ã –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫—É –æ—Ç–∫—Ä—ã–≤–∞–ª–∞—Å—å –µ—ë –±–æ–ª—å—à–∞—è –≤–µ—Ä—Å–∏—è –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ.–°–¥–µ–ª–∞–µ–º —ç—Ç–æ –ø–æ –≤—Å–µ–º –ø—Ä–∞–≤–∏–ª–∞–º: —Å –∏–º–ø–æ—Ä—Ç–∞–º–∏, –æ–±—ë—Ä—Ç–∫–æ–π –≤ —Å—Å—ã–ª–∫—É –∏ –≤—ã–∑–æ–≤–æ–º refresh() –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–π –æ—Ç—Ä–∏—Å–æ–≤–∫–∏.

// ‚úÖ –®–∞–≥ 1. –£—Å—Ç–∞–Ω–æ–≤–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫—É —á–µ—Ä–µ–∑ npm
// –í —Ç–µ—Ä–º–∏–Ω–∞–ª–µ –≤–Ω—É—Ç—Ä–∏ —Ç–≤–æ–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ –≤—ã–ø–æ–ª–Ω–∏:
// npm install simplelightbox

// ‚úÖ –®–∞–≥ 2. –î–æ–±–∞–≤—å –∏–º–ø–æ—Ä—Ç—ã –≤ index.js
// –í —Å–∞–º–æ–º –≤–µ—Ä—Ö—É —Ñ–∞–π–ª–∞, –≥–¥–µ —É —Ç–µ–±—è –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è axios, –¥–æ–±–∞–≤—å:
// import SimpleLightbox from "simplelightbox";
// import "simplelightbox/dist/simple-lightbox.min.css";

// ‚úÖ –®–∞–≥ 3. –°–æ–∑–¥–∞–π —ç–∫–∑–µ–º–ø–ª—è—Ä lightbox
// –î–æ–±–∞–≤—å –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è gallery:
// let lightbox = new SimpleLightbox('.gallery a');

// ‚úÖ –®–∞–≥ 4. –û–±–Ω–æ–≤–∏ —Ñ—É–Ω–∫—Ü–∏—é createMarkup
// –ù—É–∂–Ω–æ –æ–±–µ—Ä–Ω—É—Ç—å –∫–∞–∂–¥—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É –≤ —Å—Å—ã–ª–∫—É –Ω–∞ –±–æ–ª—å—à–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ(largeImageURL).–ü–æ–ª–Ω–∞—è –æ–±–Ω–æ–≤–ª—ë–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è:
// function createMarkup(hits) {
//     return hits.map(({ webformatURL, largeImageURL, tags, likes, views, comments, downloads }) => {
//         return `
//       <a class="gallery__item" href="${largeImageURL}">
//         <div class="photo-card">
//           <img src="${webformatURL}" alt="${tags}" loading="lazy" />
//           <div class="info">
//             <p class="info-item"><b>Likes:</b> ${likes}</p>
//             <p class="info-item"><b>Views:</b> ${views}</p>
//             <p class="info-item"><b>Comments:</b> ${comments}</p>
//             <p class="info-item"><b>Downloads:</b> ${downloads}</p>
//           </div>
//         </div>
//       </a>
//     `;
//     }).join('');
// }
// üî∏ –ö–∞–∂–¥–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ —Ç–µ–ø–µ—Ä—å –æ–±—ë—Ä–Ω—É—Ç–∞ –≤ < a href = "..." >...</a > ‚Äî —ç—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è lightbox.

// ‚úÖ –®–∞–≥ 5. –î–æ–±–∞–≤—å lightbox.refresh() –≤ getDataFromApi
// –°—Ä–∞–∑—É –ø–æ—Å–ª–µ renderHits(hits) –¥–æ–±–∞–≤—å:
// lightbox.refresh();
// üëâ –ò—Ç–æ–≥–æ, –≤–æ—Ç —ç—Ç–æ—Ç —É—á–∞—Å—Ç–æ–∫ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å —Ç–∞–∫:
// renderHits(hits);
// lightbox.refresh();
// if (page > 1) {
//     const { height: cardHeight } = document
//         .querySelector(".gallery")
//         .firstElementChild.getBoundingClientRect();

//     window.scrollBy({
//         top: cardHeight * 2,
//         behavior: "smooth",
//     });
// }
/*** 11 end ***/

/*** 12 start ***/
// –°–µ–π—á–∞—Å –ø–æ—à–∞–≥–æ–≤–æ –¥–æ–±–∞–≤–∏–º –±–∏–±–ª–∏–æ—Ç–µ–∫—É Notiflix –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ —Ç–≤–æ—ë–º –ø—Ä–æ–µ–∫—Ç–µ –≤–º–µ—Å—Ç–æ alert(...) –∏ console.log(...).–≠—Ç–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–µ–ª–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∫—Ä–∞—Å–∏–≤—ã–º–∏ –∏ —É–¥–æ–±–Ω—ã–º–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

// ‚úÖ –®–∞–≥ 1. –£—Å—Ç–∞–Ω–æ–≤–∏ Notiflix
// –í —Ç–µ—Ä–º–∏–Ω–∞–ª–µ –ø—Ä–æ–µ–∫—Ç–∞ –≤—ã–ø–æ–ª–Ω–∏:
// npm install notiflix
// // ‚úÖ –®–∞–≥ 2. –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π Notiflix –≤ index.js
// –í —Å–∞–º–æ–º –≤–µ—Ä—Ö—É —Ñ–∞–π–ª–∞ –¥–æ–±–∞–≤—å:
// import Notiflix from 'notiflix';
// // ‚úÖ –®–∞–≥ 3. –ó–∞–º–µ–Ω–∏ alert –∏ console.log –Ω–∞ Notiflix.Notify
// –ù–∏–∂–µ ‚Äî –ø—Ä–∏–º–µ—Ä—ã –∑–∞–º–µ–Ω—ã –ø—Ä—è–º–æ –ø–æ —Ç–≤–æ–µ–º—É –∫–æ–¥—É:
// üîÅ –í–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ:
// alert('Sorry, there are no images matching your search query. Please try again.');
// üí° –ó–∞–º–µ–Ω–∏ –Ω–∞:
// Notiflix.Notify.failure('Sorry, there are no images matching your search query. Please try again.');
// üîÅ –í–º–µ—Å—Ç–æ:
// console.log('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–ª–µ');
// üí° –ó–∞–º–µ–Ω–∏ –Ω–∞:
// Notiflix.Notify.warning('Please enter a search query.');
// üîÅ –ü–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞:
// –ö–æ–≥–¥–∞ —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å totalHits, –º–æ–∂–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å:
// Notiflix.Notify.success(`Hooray! We found ${totalHits} images.`);

// –ü—Ä–∏–º–µ—Ä –≤–Ω—É—Ç—Ä–∏ getDataFromApi:
// const totalHits = response.data.totalHits;

// if (page === 1) {
//     Notiflix.Notify.success(`Hooray! We found ${totalHits} images.`);
// }
// üîÅ –í –∫–æ–Ω—Ü–µ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:
// Notiflix.Notify.info("We're sorry, but you've reached the end of search results.");
// ‚úÖ –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Ç–∏–ª–∏
// –¢—ã –º–æ–∂–µ—à—å –Ω–µ –ø–æ–¥–∫–ª—é—á–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ CSS ‚Äî Notiflix –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∏–∑ –∫–æ—Ä–æ–±–∫–∏ –ø–æ—Å–ª–µ npm install.
/*** 12 ***/